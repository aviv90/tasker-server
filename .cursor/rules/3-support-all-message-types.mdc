---
description: When adding a new bot command, always support incoming, outgoing, and quoted messages
globs:
  - "routes/whatsappRoutes.js"
---

# New Commands: Support All Message Types

## Core Requirement

**When implementing a new bot command, it MUST work in all three scenarios:**

1. ✅ **Incoming messages** (from other users)
2. ✅ **Outgoing messages** (messages you send starting with `#`)
3. ✅ **Quoted/replied messages** (when replying to media with a command)

## Implementation Checklist

When adding a new command type to `intentRouter.js`:

- [ ] Add tool name to `allowedTools` in `validateDecision()`
- [ ] Implement in `handleIncomingMessage()` switch statement
- [ ] Implement in `handleOutgoingMessage()` switch statement  
- [ ] Support quoted messages (merge prompt with quoted content)
- [ ] Add ACK message in `sendAck()` if needed
- [ ] Test with incoming message
- [ ] Test with outgoing message (# prefix)
- [ ] Test with quoted message (reply to image/video/text)

## Code Pattern

### 1. Add to intentRouter allowedTools

```javascript
const allowedTools = new Set([
  'gemini_image', 'openai_image', 'grok_image',
  'veo3_video', 'kling_text_to_video',
  'music_generation', // ← Your new command
  'gemini_chat', 'openai_chat'
]);
```

### 2. Implement in Both Message Handlers

The code should be **identical** in both places:

#### handleIncomingMessage() - Line ~800
```javascript
case 'music_generation': {
  const musicParsing = await parseMusicRequest(prompt);
  const cleanMusicPrompt = musicParsing.cleanPrompt || prompt;
  const wantsVideo = musicParsing.wantsVideo || false;
  
  const ackMsg = wantsVideo 
    ? '🎵🎬 קיבלתי! מתחיל יצירת שיר עם קליפ/וידאו...'
    : '🎵 קיבלתי! מתחיל יצירת שיר עם Suno AI... 🎶';
  await sendTextMessage(chatId, ackMsg);
  
  const musicResult = await generateMusicWithLyrics(cleanMusicPrompt, {
    whatsappContext: { chatId, senderId, senderName },
    makeVideo: wantsVideo
  });
  
  if (musicResult.error) {
    await sendTextMessage(chatId, `❌ ${musicResult.error}`);
  }
  return;
}
```

#### handleOutgoingMessage() - Line ~1600
```javascript
// EXACT SAME CODE as above
case 'music_generation': {
  // ... identical implementation
}
```

### 3. Support Quoted Messages

Both handlers already have quoted message support:

```javascript
// Check if this is a quoted/replied message
const quotedMessage = messageData.quotedMessage;
let finalPrompt = basePrompt;
let hasImage = false;
let hasVideo = false;

if (quotedMessage && quotedMessage.stanzaId) {
  const quotedResult = await handleQuotedMessage(quotedMessage, basePrompt, chatId);
  finalPrompt = quotedResult.prompt;
  hasImage = quotedResult.hasImage;
  hasVideo = quotedResult.hasVideo;
}
```

This means your command automatically works with:
- Text reply: `# generate music` (reply to previous song request)
- Image reply: `# make this into a poster` (reply to photo)
- Video reply: `# analyze this` (reply to video)

## Real Example: Music with Video

### Works in all scenarios:

1. **Incoming**: Friend sends `# צור שיר על דובי כולל וידאו`
2. **Outgoing**: You send `# צור שיר על דובי כולל וידאו`
3. **Quoted**: Reply to an image with `# create a song about this, with video`

All three trigger the same `music_generation` flow.

## Testing New Commands

```javascript
// Test 1: Incoming (from someone else)
// Have someone send: "# your new command"

// Test 2: Outgoing (you send)
// Send yourself: "# your new command"

// Test 3: Quoted - Reply to an image/video/text
// Reply to any message with: "# your new command"
```

## Anti-Pattern: Don't Do This

❌ **Implementing only in one handler:**
```javascript
// Only in handleIncomingMessage
case 'new_command': { ... }

// Missing from handleOutgoingMessage!
// Result: Command only works for others, not for you
```

❌ **Different implementations:**
```javascript
// handleIncomingMessage
case 'new_command': {
  const result = await doSomething(prompt);
  // ...
}

// handleOutgoingMessage  
case 'new_command': {
  const result = await doSomethingElse(prompt); // Different!
  // ...
}
```

## Remember

- **DRY violation is acceptable here** - the code is duplicated for a reason (separation of incoming/outgoing flows)
- **Copy-paste is your friend** - when adding a new command, copy an existing similar one
- **Test all three scenarios** - don't assume it works, verify it
- **Quoted messages are powerful** - they let users interact with previous media/text
